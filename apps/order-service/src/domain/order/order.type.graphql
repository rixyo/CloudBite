scalar Date

type Query {
  orders: [Order!]
  order(id: ID!): Order!
  userOrders: [Order!]!
  getRestaurantOrders(restaurantId: ID!): [Order!]!
  getUserOrders: [Order!]!
}

type Mutation {
    updateOrder(id: ID!, input: UpdateOrderInput!): Order!
    deleteOrder(id: ID!): Order!
    checkout(createOrderInput: CreateOrderInput!): ChekoutRespone!
}



input OrderItemInput {
itemId: ID!
quantity: Int!
price: String!
restaurantId: ID!
itemName: String!
}
type OrderItem{
  id: ID!
  order_item_id: ID!
  restaurant_id: ID!
  quantity: Int!
  order_item_name: String!
  order_item_price: String!
  createdAt: Date!
  updatedAt: Date!
}
type Order{
  id: ID!
  user: User!
  payment_status: String!
  delivery_status: String!
  address: String!
  orderItem: [OrderItem]!
  phone: String!
}
input CreateOrderInput {
  orderItems: [OrderItemInput!]!
}
input UpdateOrderInput {
  delivery_status: String
}
type CreateOrderReturn {
  id: ID!
  url: String!
}
type ChekoutRespone{
  id: ID!
  url: String!
}

type Order @key(fields: "id") {
  id: ID!
  user: User!
  address: String!
  phone: String!
    createdAt: Date!
  updatedAt: Date!
}

extend type User @key(fields: "id") {
  id: ID! @external
}
extend type Restaurant @key(fields: "id") {
  id: ID! @external
}

extend type RestaurantDish @key(fields: "id") {
  id: ID! @external
}

scalar Date

type Query {
  orders: [Order]
  order(id: ID!): Order
  userOrders: [Order!]!
}

type Mutation {
    createOrder(restaurantId: ID!,input: CreateOrderInput!): CreateOrderReturn!
    updateOrder(id: ID!, input: UpdateOrderInput!): Order!
    deleteOrder(id: ID!): Order!
}
input CreateOrderInput {
  orderItemsIds: [ID!]!
  orderItemsQuantities: [Int!]!
  orderItemsPrices: [Float!]!
  orderItemsNames: [String!]!
}
input UpdateOrderInput {
  payment_status: String
  delivery_status: String
}
type CreateOrderReturn {
  id: ID!
  url: String!
}

type Order @key(fields: "id") {
  id: ID!
  restaurant: Restaurant!
  customer: User!
  orderItems: [OrderItem!]!
  payment_status: String!
  delivery_status: String!
  createdAt: Date!
  updatedAt: Date!
}
type OrderItem @key(fields: "id") {
  id: ID!
  order: Order!
  item: RestaurantDish!
  quantity: Int!
  price: Float!
  name: String!
  createdAt: Date!
  updatedAt: Date!
}
extend type User @key(fields: "id") {
  id: ID! @external
}
extend type Restaurant @key(fields: "id") {
  id: ID! @external
}
extend type RestaurantDish@key(fields: "id") {
  id: ID! @external
}
